const PATH = "/models/streamdeck-transformed.glb";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 stream_deck_xl.glb --types --transform --keepnames
Files: stream_deck_xl.glb [849.97KB] > /Users/jarno/dev/projects/dev/portfolio3d/_benodigdheden/models/streamdeck/v2/stream_deck_xl-transformed.glb [77.7KB] (91%)
*/

import * as THREE from "three";
import React, { JSX, useEffect } from "react";
import { Image, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    empty_2: THREE.Mesh;
    empty_4: THREE.Mesh;
  };
  materials: {};
  // animations: GLTFAction[]
};

export function StreamDeckModel(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF(PATH) as GLTF as GLTFResult;

  useEffect(() => {
    const material = nodes.empty_4.material as THREE.MeshStandardMaterial;
    material.needsUpdate = true;
    material.depthTest = false;
    material.transparent = true;
    material.opacity = 0.2;
  }, []);

  const keys = [
    { row: 1, col: 1, url: "/images/streamdeck/keys/RedTagKey@2x.png" },
    { row: 1, col: 2, url: "/images/streamdeck/keys/OrangeTagKey@2x.png" },
    { row: 1, col: 3, url: "/images/streamdeck/keys/YellowTagKey@2x.png" },
    { row: 1, col: 4, url: "/images/streamdeck/keys/GreenTagKey@2x.png" },
    { row: 1, col: 5, url: "/images/streamdeck/keys/BlueTagKey@2x.png" },
    { row: 2, col: 1, url: "/images/streamdeck/keys/PurpleTagKey@2x.png" },
    { row: 2, col: 2, url: "/images/streamdeck/keys/GrayTagKey@2x.png" },
    { row: 2, col: 3, url: "/images/streamdeck/keys/CustomTagKey@2x.png" },
    { row: 2, col: 4, url: "/images/streamdeck/keys/ClearTagKey@2x.png" },
    { row: 2, col: 5, url: "/images/streamdeck/keys/ColorWheelKey@2x.png" },
  ];

  return (
    <group {...props} dispose={null}>
      <mesh
        name="empty_2"
        geometry={nodes.empty_2.geometry}
        material={nodes.empty_2.material}
      />
      <mesh
        name="empty_4"
        geometry={nodes.empty_4.geometry}
        material={nodes.empty_4.material}
      />
      <group
        position={[-66, 25, 33.5]}
        scale={13.5}
        rotation={[Math.PI + 0.145, 0, 0]}
      >
        {keys.map(({ row, col, url }, index) => (
          <Image
            key={`${row}-${col}`}
            url={url}
            // transparent
            side={THREE.DoubleSide}
            // opacity={1}
            toneMapped={false}
            position={[col * 1.405, row * 1.405, 0]}
            // material-depthWrite={false}
            rotation-x={Math.PI}
          />
        ))}
      </group>
    </group>
  );
}

useGLTF.preload(PATH);
